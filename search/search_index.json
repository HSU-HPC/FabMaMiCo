{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to FabMaMiCo","text":"<p>This is the documentation for FabMaMiCo.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>FabMaMiCo is a plugin for FabSim3, specifically designed for the MaMiCo simulation framework.</p> <p>FabSim3 is a workflow automation tool for automating complex tasks on remote high-performance computing (HPC) resources. It enables users to manage large-scale job submissions, file management and data analysis on remote machines.</p> <p>MaMiCo is a framework for hybrid fluid flow simulations, coupling fluid dynamics and molecular dynamics solvers. The framework is designed to be highly flexible and extensible, and to support incorporated and external solvers for both the MD and CFD simulation. Its setup can thus be highly complex and it may require a lot of manual work, which in its nature is both error-prone and time-consuming.</p> <p>FabMaMiCo aims to automate the setup and execution of MaMiCo simulations. As a plugin for FabSim3, it builds on top of FabSim3's functionality.</p> <p>It is key to understand that FabMaMiCo is a plugin that is designed to be adapted and extended by the user to fit their specific needs. The plugin provides a set of tasks and configurations, but it is expected that users will need to adapt these to their specific use case. Most of the tasks and configurations serve as examples.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.6 or higher</li> </ul>"},{"location":"fabmamico-commands/","title":"FabMaMiCo Commands","text":"<p>FabMaMiCo offers the following tasks to set up and run MaMiCo simulations.</p>"},{"location":"fabmamico-commands/#verify-fabmamico-plugin-installation","title":"Verify FabMaMiCo Plugin Installation","text":""},{"location":"fabmamico-commands/#mamico_test_plugin","title":"mamico_test_plugin","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_test_plugin\n</code></pre> This should output a message that the FabMaMiCo plugin is installed correctly. The parameters <code>&lt;machine&gt;</code> is irrelevant for this command.</p>"},{"location":"fabmamico-commands/#get-system-information","title":"Get System Information","text":"<p>The following commands make use of the remote lmod system to load modules.</p>"},{"location":"fabmamico-commands/#mamico_mod_overview","title":"mamico_mod_overview","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_mod_overview\n</code></pre> This lists an overview of available modules that can be loaded via lmod on the remote machine.</p>"},{"location":"fabmamico-commands/#mamico_mod_available","title":"mamico_mod_available","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_mod_available:&lt;query&gt;\n</code></pre> This lists a more detailed overview of available modules that can be loaded via lmod on the remote machine. The optional parameter <code>&lt;query&gt;</code> can be used to filter the list of available modules.</p>"},{"location":"fabmamico-commands/#mamico_mod_keyword","title":"mamico_mod_keyword","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_mod_keyword:&lt;keyword&gt;\n</code></pre> This searches modules that can be loaded via lmod on the remote machine for a specific keyword.</p>"},{"location":"fabmamico-commands/#handle-mamico-installations","title":"Handle MaMiCo Installations","text":""},{"location":"fabmamico-commands/#mamico_install","title":"mamico_install","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_install:&lt;config&gt;\n</code></pre> This downloads the source code of MaMiCo and optionally of ls1-mardyn and OpenFOAM, transfers it to the remote machine and compiles it according to the configuration specified in <code>plugins/FabMaMiCo/config_files/&lt;config&gt;/settings.yml</code>.</p> <p>Note</p> <p>The compilation process is submitted as a job. However, certain remote hosts like HSUper require compilation on the login node. The job script is thus executed via <code>bash</code>, and its completion might take a while as the local shell shows the progress of the remote compilation.</p>"},{"location":"fabmamico-commands/#mamico_list_installations","title":"mamico_list_installations","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_list_installations:verbose\n</code></pre> This lists all MaMiCo installations on the remote machine. The optional parameter <code>verbose</code> provides the settings of each installations.</p>"},{"location":"fabmamico-commands/#mamico_installation_available","title":"mamico_installation_available","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_installation_available:&lt;checksum&gt;\n</code></pre> This checks if a specific MaMiCo installation is available on the remote machine.</p>"},{"location":"fabmamico-commands/#mamico_remove_installation","title":"mamico_remove_installation","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_remove_installation:&lt;checksum&gt;\n</code></pre> This removes a specific MaMiCo installation from the remote machine, if it exists.</p>"},{"location":"fabmamico-commands/#mamico_remove_all_installations","title":"mamico_remove_all_installations","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_remove_all_installations\n</code></pre> This removes all MaMiCo installations from the remote machine.</p>"},{"location":"fabmamico-commands/#execute-mamico-simulations","title":"Execute MaMiCo Simulations","text":""},{"location":"fabmamico-commands/#mamico_run","title":"mamico_run","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_run:&lt;config&gt;\n</code></pre> This command internally calls the <code>mamico_install</code>-task to make sure the MaMiCo executable is available. It then transfers all config files to the remote machine, generates a batch script file and submits it to the scheduler.</p> <p>Note</p> <p>Here, the command returns after the job has been submitted to the job scheduler.</p> <p>Note</p> <p>You can append the parameter <code>replicas=&lt;number&gt;</code> to run multiple replicas of the simulation.</p>"},{"location":"fabmamico-commands/#mamico_run_ensemble","title":"mamico_run_ensemble","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_run_ensemble:&lt;config&gt;\n</code></pre> This internally calls the <code>mamico_install</code>-task to make sure the MaMiCo executable is available. It requires multiple folders inside a <code>SWEEP</code>-directory. If a <code>generate_ensemble.py</code> script is available in the config directory, the script is executed to populate the SWEEP/ directory. The task copies all config files to the remote machine and generates a batch script file for each simulation. Finally, it submits all jobs to the scheduler.</p>"},{"location":"fabmamico-commands/#mamico-post-processing","title":"MaMiCo Post-Processing","text":"<p>Note</p> <p>The remote postprocessing is still under development.</p>"},{"location":"fabmamico-commands/#mamico-monitoring","title":"MaMiCo Monitoring","text":""},{"location":"fabmamico-commands/#mamico_stat","title":"mamico_stat","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_stat\n</code></pre> This shows the output of <code>squeue</code> on the remote machine for the user defined in <code>machines_user.yml</code>.</p>"},{"location":"fabmamico-commands/#mamico_jobs_overview","title":"mamico_jobs_overview","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_jobs_overview\n</code></pre> This shows the number of jobs in the queue (planned, running) on the remote machine for the user defined in <code>machines_user.yml</code>.</p>"},{"location":"fabmamico-commands/#mamico_jobs_cancel_all","title":"mamico_jobs_cancel_all","text":"<p><pre><code>fabsim &lt;machine&gt; mamico_jobs_cancel_all\n</code></pre> This cancels all jobs in the queue on the remote machine for the user defined in <code>machines_user.yml</code>.</p>"},{"location":"fabsim-commands/","title":"Fabsim Commands","text":"<p>FabSim3 offers a variety of commands to interact with remote machines and to manage simulation campaigns. Each plugin can provide additional commands.  </p> <p>A FabSim3 command is usually structured as follows: <pre><code>fabsim &lt;machine&gt; &lt;task&gt;:&lt;task-arguments&gt;\n</code></pre></p> <p>The following list provides an overview of the most important commands.</p>"},{"location":"fabsim-commands/#local-fabsim3-commands","title":"Local FabSim3 commands","text":"<pre><code>fabsim -l/--list tasks\n# Prints the list of available tasks (FabSim3 API, [...FabSim plugins])\n</code></pre> <pre><code>fabsim -l/--list machines\n# Prints the list of available remote machines.\n</code></pre> <pre><code>fabsim localhost avail_plugin\n# Prints the list of available plugins on localhost.\n</code></pre> <pre><code>fabsim localhost install_plugin:&lt;plugin-name&gt;\n# Installs the specified plugin on localhost.\n</code></pre> <pre><code>fabsim localhost update_plugin:&lt;plugin-name&gt;\n# Updates the specified plugin on localhost\n# (pulls latest version from the repository).\n</code></pre> <pre><code>fabsim localhost remove_plugin:&lt;plugin_name&gt;\n# Removes the specified plugin from the remote machine.\n</code></pre>"},{"location":"fabsim-commands/#remote-fabsim3-commands","title":"Remote FabSim3 commands","text":"<pre><code>fabsim &lt;remote-machine&gt; machine_config_info\n# Prints the configuration information for the specified remote machine.\n# Both configs from 'machines.yml' and 'machines_user.yml' are printed.\n</code></pre> <pre><code>fabsim &lt;remote-machine&gt; stat\n# Prints the status of the job scheduler on the remote machine.\n# [as configured in machines.yml]\n</code></pre> <pre><code>fabsim &lt;remote-machine&gt; wait_complete:jobID=&lt;jobID&gt;\n# Waits until the job with the specified jobID is completed on the remote machine.\n# jmToDo: check if this is working\n</code></pre> <pre><code>fabsim &lt;remote-machine&gt; cancel_job:jobID=&lt;jobID&gt;\n# Cancels the job with the specified jobID on the remote machine.\n# [as configured in machines.yml]\n</code></pre> <pre><code>fabsim &lt;remote-machine&gt; put_results\n# Copies the results from localhost to the remote machine.\n# This is not intended for normal use.\n</code></pre> <pre><code>fabsim &lt;remote-machine&gt; fetch_results\n# Copies the results from the remote machine to localhost.\n</code></pre> <pre><code>fabsim &lt;remote-machine&gt; clear_results\n# Removes the results from the remote machine via `rm -rf $job_results_contents`.\n</code></pre> <pre><code>fabsim &lt;remote-machine&gt; fetch_configs\n# Fetches the config-files from the remote machine to localhost.\n</code></pre>"},{"location":"fabsim-commands/#setup-tasks","title":"Setup Tasks","text":"<pre><code>fabsim &lt;remote-machine&gt; setup_ssh_keys[:password=&lt;password&gt;]\n# Sets up SSH keys for passwordless login to the remote machine.\n# If `.ssh/id_rsa.pub` exists, it will be copied to the remote machine.\n# If not, a new key pair will be generated and copied to the remote machine.\n# A password can be provided as an optional argument.\n</code></pre>"},{"location":"fabsim-commands/#internal-fabsim3-tasks","title":"Internal FabSim3 Tasks","text":"<pre><code>fabsim &lt;remote-machine&gt; setup_fabsim_dirs\n# Creates the following dirs on the remote machine:\n# - $config_path\n# - $results_path\n# - $scripts_path\n## Used in put_configs()\n</code></pre> <pre><code>fabsim &lt;remote-machine&gt; clean_fabsim_dirs\n# Recursively removes the following dirs on the remote machine:\n# - $config_path\n# - $results_path\n# - $scripts_path\n## Used in put_configs()\n</code></pre>"},{"location":"fabsim-commands/#more","title":"more","text":"<ul> <li>ensemble2campaign</li> <li>campaign2ensemble</li> <li>install_packages (installs packages)</li> <li>install_app (locally install an app e.g. QCG-PilotJob, transfer it afterwards, launch install-script job)</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>As FabMaMiCo is a plugin for the automation tool FabSim3, FabSim3 needs to be installed first. Once installed, you can install FabMaMiCo as a plugin for FabSim3.</p>"},{"location":"installation/#fabsim3","title":"FabSim3","text":"<p>Please refer to the FabSim3 documentation for the installation of FabSim3.</p>"},{"location":"installation/#fabmamico","title":"FabMaMiCo","text":""},{"location":"installation/#install","title":"Install","text":"<p>Install the FabMaMiCo plugin by running this FabSim3-command: <pre><code>fabsim localhost install_plugin:FabMaMiCo\n</code></pre></p> <p>That's it. FabMaMiCo is now installed and ready to use.</p>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>To verify the successful installation, run the <code>mamico_test_plugin</code>-task of FabMaMiCo: <pre><code>fabsim localhost mamico_test_plugin\n</code></pre></p>"},{"location":"installation_fabsim/","title":"Installation fabsim","text":""},{"location":"installation_fabsim/#introduction","title":"Introduction","text":"<p>FabSim3 is an automation toolkit that is normally installed on your local machine (e.g. laptop or desktop). It requires a Linux-like environment, and has been used extensively on e.g. Ubuntu And Mac OS X. If you wish to use FabSim3 on Windows then we recommend using the Linux Subsystem for Windows.</p>"},{"location":"installation_fabsim/#dependencies","title":"Dependencies","text":"<ol> <li> <p>FabSim3 requires the following Python modules</p> <ul> <li>rich</li> <li>fabric2</li> <li>pyyaml</li> <li>pytest</li> <li>pytest-pep8</li> <li>ruamel.yaml</li> <li>numpy</li> <li>beartype</li> </ul> <p>Note</p> <p>You ONLY need to install ruamel.yaml and  rich  packages, other packages are installed by FabSim3. To install both <code>ruamel.yaml</code> and <code>rich</code> packages, simply type <pre><code>pip3 install ruamel.yaml rich\n</code></pre></p> </li> <li> <p>To perform the <code>Pytest</code> tests (not required for using FabSim3, but essential for running the tests), you will need <code>pytest</code> and <code>pytest-pep8</code>.</p> </li> <li> <p>To install FabSim3 plugins, git needs to be installed in your machine.</p> </li> </ol>"},{"location":"installation_fabsim/#installing-fabsim3","title":"Installing FabSim3","text":"<ol> <li>Clone FabSim3 from the GitHub repository:     <pre><code>git clone https://github.com/jomichaelis/FabSim3.git\n</code></pre></li> <li> <p>To install all packages automatically and configure yml files, please go to your <code>FabSim3</code> directory, and type     <pre><code>python3 configure_fabsim.py\n</code></pre></p> </li> <li> <p>After installation process, the root FabSim3 directory should be added to both <code>PATH</code> and <code>PYTHONPATH</code> environment variables. The instruction to do that will be shown at the end of output of <code>python3 configure_fabsim.py</code> command.     <pre><code>Congratulation \ud83c\udf7b\nFabSim3 installation was successful \u2714\n\nIn order to use fabsim command anywhere in your PC, you need to update the PATH\nand PYTHONPATH environmental variables.\n\n    export PATH=/home/hamid/FabSim3/fabsim/bin:$PATH\n    export PYTHONPATH=/home/hamid/FabSim3:$PYTHONPATH\n\n    export PATH=~/.local/bin:$PATH\n\nThe last list is added because the required packages are installed with flag \n\"--user\" which makes pip install packages in your your home instead instead \nof system directory.\n\n\nTip: To make these updates permanent, you can add the following command at the \nend of your bash shell script which could be one of ['~/.bashrc', '~/.bash_profile', \n'~/.zshrc', '~/.bash_aliases'] files, depends on your OS System.\n\n\ud83d\udece To load the new updates in PATH and PYTHONPATH you need to reload your bash shell \nscript, e.g., source ~/.bashrc, or lunch a new terminal.\n</code></pre></p> </li> <li> <p>To make the fabsim command available in your system, please restart the shell by opening a new terminal or just re-load your bash profile by <code>source</code> command.</p> </li> </ol>"},{"location":"installation_fabsim/#updating-fabsim3","title":"Updating FabSim3","text":"<p>If you have already installed FabSim3 and want to update to the latest version, simply type <code>git pull</code> in your local FabSim3 directory.</p> <p>Attention</p> <pre><code>Your personal settings like the `machines_user.yml` will be unchanged by `git pull`, **unless** you run `python3 configure_fabsim.py` again, which overwrites the current `machines_user.yml` file.\n</code></pre>"},{"location":"installation_fabsim/#list-of-available-machines-and-tasks","title":"List of available machines and tasks","text":"<p>The basic syntax of any FabSim3 command is the following: <pre><code>fabsim &lt;machine_name&gt; &lt;task_name&gt;:&lt;task_argument_list&gt;\n</code></pre></p> <p>where </p> <ul> <li> <p><code>task_name</code> is the name of the task to be executed.</p> </li> <li> <p><code>task_argument_list</code> is a comma seperated list of arguments specific to the task.</p> </li> <li> <p><code>machine_name</code> is the name of the machine on which the task is to be executed.</p> </li> </ul> <p>You can see the list of available FabSim3 machines by typing: <pre><code>fabsim -l machines\n</code></pre></p> <p>which gives a table with the <code>machine_names</code> and their addresses,</p> <p>You can see the list of available FabSim3 machines by typing: <pre><code>fabsim -l tasks\n</code></pre></p> <p>which gives a table with the plugin names and their associated <code>task_names</code>.</p>"},{"location":"installation_fabsim/#known-issues","title":"Known Issues","text":"<p>Here is the list of known issue that reported by our users so far:</p>"},{"location":"installation_fabsim/#ssh-connect-to-host-localhost-port-22-connection-refused","title":"ssh: connect to host localhost port 22: Connection refused","text":""},{"location":"installation_fabsim/#linux","title":"Linux","text":"<p>This is a common issue on Linux system, and it will be solved by re-installing openssh server, to do that</p> <ol> <li>Remove SSH with the following command     <pre><code>sudo apt-get remove openssh-client openssh-server\n</code></pre></li> <li>Install SSH again with     <pre><code>sudo apt-get install openssh-client openssh-server\n</code></pre></li> </ol>"},{"location":"installation_fabsim/#macos","title":"MacOS","text":"<p>on Mac OSX, make sure turn on Remote Login under System Preferences then File Sharing.</p> <p>The easiest way to test FabSim3 is to simply go to the base directory of your FabSim3 installation and try the command demonstrated below in the List of available commands.</p> <p>Mac users may get a <code>ssh: connect to host localhost port 22: Connection refused</code> error. This means you must enable remote login. This is done in System Preferences &gt; Sharing &gt; Remote Login.</p>"},{"location":"installation_fabsim/#filenotfounderror-errno-2-no-such-file-or-directory-fab-fab","title":"FileNotFoundError: [Errno 2] No such file or directory: \u2018fab\u2019: \u2018fab\u2019","text":"<p>It is possible that your python bin path directory is not in the system <code>PATH</code>. You may see a <code>WARNING</code> message during the FabSim3 installation (by executing <code>python3 configure_fabsim.py</code> command). Here an example :</p> <pre><code>  WARNING: The script fab is installed in '&lt;----&gt;/Python/3.&lt;xxx&gt;/bin' which is not on PATH.\n  Consider adding this directory to PATH or,\n  if you prefer to suppress this warning, use --no-warn-script-location.\n\n  Traceback (most recent call last):\n  File \"configure_fabsim.py\", line 189, in &lt;module&gt;\n    main()\n  File \"configure_fabsim.py\", line 148, in main\n    cwd=FS3_env.FabSim3_PATH) == 0\n  File \"&lt;----&gt;/python3..&lt;xxx&gt;/subprocess.py\", line 339, in call\n    with Popen(*popenargs, **kwargs) as p:\n  File \"&lt;----&gt;/python3..&lt;xxx&gt;/subprocess.py\", line 800, in __init__\n    restore_signals, start_new_session)\n  File \"&lt;----&gt;/python3..&lt;xxx&gt;/subprocess.py\", line 1551, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'fab': 'fab'    \n</code></pre> <p>To fix this issue, you need to add the executable path of <code>fab</code> to your system <code>PATH</code> environment variable. To make this update permanent, please go to your bash file, which could be <code>~/.bash_profile</code>, <code>~/.bashrc</code>, or <code>~/.zshrc</code> depends on your OS and shell version, and add the following line at the end:     <pre><code>export PATH=$PATH:&lt;fab_executable_PATH&gt;\n</code></pre></p> <p>Please make sure that you used the same executable path for <code>fab</code> as it mentioned in the warning message.</p> <p>Note</p> <p>If you are having a problem which is not listed here, please raise a github issue in FabSim3 repository, and provide a full output log, so we can have a look and provide a solution or address your issue.</p>"},{"location":"nice-to-know/","title":"Nice to know","text":""},{"location":"nice-to-know/#useful-ssh-multiplexing-commands","title":"Useful SSH Multiplexing Commands","text":"<pre><code>ssh -O check cosma # check if the master connection is still alive\nssh -O stop cosma  # stop the master connection\n</code></pre>"},{"location":"setup-simulations/","title":"Setting up Simulations","text":""},{"location":"setup-simulations/#introduction","title":"Introduction","text":"<p>After setting up your remote machine for FabSim3, FabMaMiCo simulations can be set up to be run on the remote machine.</p> <p>The plugin's directory structure contains these important files and folders:</p> <pre><code>FabMaMiCo\n\u251c\u2500 config_files/\n\u2502  \u251c\u2500 simA/\n\u2502  \u2502  \u251c\u2500 CheckpointSimpleMD_10000_reflecting_0.checkpoint\n\u2502  \u2502  \u251c\u2500 settings.yml\n\u2502  \u2502  \u2514\u2500 couette.xml\n\u2502  \u2514\u2500 simB/\n\u2502  \u2502  \u251c\u2500 CheckpointSimpleMD_10000_reflecting_0.checkpoint\n\u2502  \u2502  \u251c\u2500 settigns.yml\n\u2502  \u2502  \u2514\u2500 couette.xml\n\u2502  \u2514\u2500 [...]\n\u251c\u2500 docs/\n\u251c\u2500 helpers/\n\u251c\u2500 scripts/\n\u251c\u2500 templates/\n\u251c\u2500 utils/\n\u251c\u2500 ...\n\u251c\u2500 FabMaMiCo.py\n\u251c\u2500 ...\n\u251c\u2500 machines_FabMaMiCo_user_example.yml\n\u251c\u2500 ...\n</code></pre>"},{"location":"setup-simulations/#config_files","title":"<code>config_files/</code>","text":"<p>Here, different folders contain different MaMiCo simulation setups. Each folder contains a <code>settings.yml</code> file, which specifies the MaMiCo compilation. Compilation flags as well as parameters related to other solvers like ls1-mardyn or OpenFOAM are defined here. Additionally, the folder contains the simulation-specific files, like the <code>couette.xml</code> file, which is used for the couette flow example, or some checkpoint files. If this configuration is intended to run a job ensemble (multiple simulations with different input), the folder <code>SWEEP/</code> is used to store the different configurations. An example is given in the <code>config_files/study_3_filter_nlm_sq_MD30</code> folder. In this configuration, there is also a Python script <code>generate_ensemble.py</code>, which can be used to generate the different configurations for the job ensemble.</p>"},{"location":"setup-simulations/#docs","title":"<code>docs/</code>","text":"<p>This folder contains the documentation for the FabMaMiCo plugin. The documentation is written in Markdown and can be viewed in the browser. For convenience, mkdocs is used to generate a static website from the Markdown files. The documentation is generating these very pages.</p>"},{"location":"setup-simulations/#scripts","title":"<code>scripts/</code>","text":"<p>This folder contains most of the logic for the FabMaMiCo plugin. There are scripts for the different tasks that can be executed through FabSim3. Among others, the logic for MaMiCo compilation is implemented in <code>scripts/setup.py</code>, and a reader for the <code>settings.yml</code> file is implemented in <code>scripts/settings.py</code>.</p>"},{"location":"setup-simulations/#templates","title":"<code>templates/</code>","text":"<p>This folder contains batch script templates. Those templates are appended to the machine-specific batch script header. The templates are used to define the commands executed in specific tasks. They usually contain placeholders that are populated with the actual values during task execution. After the placeholders are replaced, the batch script is written to the remote machine and executed.</p>"},{"location":"setup-simulations/#fabmamicopy","title":"<code>FabMaMiCo.py</code>","text":"<p>This is the main file of the FabMaMiCo plugin. It defines the available tasks that can be executed through FabSim3.</p>"},{"location":"setup-simulations/#machines_fabmamico_user_exampleyml","title":"<code>machines_FabMaMiCo_user_example.yml</code>","text":"<p>This file contains plugin-agnostic parameters. Copy or rename this file to <code>machines_FabMaMiCo_user.yml</code> and adjust the settings to your needs.</p>"},{"location":"machine-configuration/examples/","title":"Concrete examples of machine configuration","text":"<p>ToDo!</p>"},{"location":"machine-configuration/examples/#machinesyml","title":"<code>machines.yml</code>","text":"HSUperCosmaSofjaAntsMiniclusterFritzAlex <pre><code>hsuper:\n    remote: \"hsuper-login.hsu-hh.de\"\n    home_path_template: \"/beegfs/home/m/$username\"\n    batch_header: slurm-hsuper\n    job_dispatch: \"sbatch\"\n    stat: \"squeue -u $username --Format=jobid,state,account,timeleft,timeused,username --noheader\"\n    cancel_job_command: \"scancel\"\n    prevent_results_overwrite: \"warn_only\"\n    modules:\n        mamico: [\"load python\"]\n</code></pre> <pre><code>cosma:\n    remote: cosma\n    home_path_template: \"/cosma/home/do009/$username\"\n    batch_header: slurm-cosma\n    job_dispatch: \"sbatch\"\n    cores: 1\n    job_wall_time: \"0-0:01:00\"\n    manual_ssh: true\n</code></pre> <pre><code>todo: true\n# NO INTERNET CONNECTION (https://wasd.urz.uni-magdeburg.de/jschulen/urz_hpc/hpc21/)\n</code></pre> <pre><code>todo: true\n</code></pre> <pre><code>todo: true\n</code></pre> <pre><code>todo: true\n</code></pre> <pre><code>todo: true\n</code></pre>"},{"location":"machine-configuration/examples/#machines_useryml","title":"<code>machines_user.yml</code>","text":"defaultHSUperCosmaSofjaAntsMiniclusterFritzAlex <pre><code>default:\n    local_results: \"/home/jo/repos/FabSim3/results\"\n    local_configs: \"/home/jo/repos/FabSim3/config_files\"\n</code></pre> <pre><code>username: \"michaelj\"\n</code></pre> <pre><code>username: \"dc-mich3\"\n</code></pre> <pre><code>username: \"qeqe81qu\"\n</code></pre> <pre><code>username: \"qeqe81qu\"\n</code></pre> <pre><code>username: \"jo\"\n</code></pre> <pre><code>todo: true\n</code></pre> <pre><code>todo: true\n</code></pre>"},{"location":"machine-configuration/general/","title":"Machine Configuration","text":""},{"location":"machine-configuration/general/#general-information","title":"General Information","text":"<p>FabSim3 includes a list of preconfigured machines. The parameters for each machine are stored in <code>.yml</code> files. While some parameters are globally valid, others are specific to the user or the simulation run.</p> <p>FabSim3 thus uses three different machine configuration files:</p> <ul> <li>machine-specific configuration file: <code>$FABSIM3_HOME/fabsim/deploy/machines.yml</code><ul> <li>This file is part of the public FabSim3 repository.</li> <li>It contains the machine-agnostic settings like the remote url, job scheduler commands, etc.</li> <li>You should not need to change this file.</li> </ul> </li> <li>user-specific configuration file: <code>$FABSIM3_HOME/fabsim/deploy/machines_user.yml</code><ul> <li>This file is not part of the FabSim3 repository, it is created during the installation of FabSim3.</li> <li>It contains user-agnostic settings like username, account, etc.</li> <li>You should change this file to match your personal remote machine settings once you have installed FabSim3.</li> </ul> </li> <li>plugin-specific configuration file: <code>$FABSIM3_HOME/plugins/FabMaMiCo/machines_FabMaMiCo_user.yml</code><ul> <li>This file is not part of the FabMaMiCo plugin, you need to create it manually by copying and renaming the exemplary file.</li> <li>It contains plugin-specific parameters, like the remote installation path for MaMiCo, etc.</li> <li>Adapt this file to your needs and even consider changing it for individual task executions.</li> </ul> </li> </ul> <pre><code>.\n\u251c\u2500 fabsim/\n\u2502  \u2514\u2500 deploy/\n\u2502     \u251c\u2500 machines.yml\n\u2502     \u251c\u2500 machines_user.yml\n\u2502     \u251c\u2500 (machines_user_example.yml)\n\u2502     \u2514\u2500 (machines_user_backup.yml)\n\u251c\u2500 plugins/\n\u2502  \u2514\u2500 FabMaMiCo/\n\u2502     \u251c\u2500 machines_FabMaMiCo_user.yml\n\u2502     \u2514\u2500 (machines_FabMaMiCo_user_example.yml)\n</code></pre> <p>Parameters that are defined multiple times are resolved in the following order: 1. Plugin-specific configuration file 2. User-specific configuration file 3. Machine-specific configuration file</p> <p>This means a parameter defined in the plugin-specific configuration file will overwrite the same parameter defined in the user-specific configuration file, which in turn will overwrite the same parameter defined in the machine-specific configuration file.</p> <p>Parameters can contain placeholders (<code>$placeholder</code>). If specified, they are resolved in runtime.</p>"},{"location":"machine-configuration/general/#set-up-a-remote-machine","title":"Set up a Remote Machine","text":"<p>Please follow the steps to configure your remote machine for FabSim3:</p> <ol> <li> <p>Machine-specific configuration file: <code>$FABSIM3_HOME/fabsim/deploy/machines.yml</code></p> <ul> <li>Check if the remote machine you want to use is already listed in the <code>machines.yml</code> file</li> </ul> </li> <li> <p>User-specific configuration file: <code>$FABSIM3_HOME/fabsim/deploy/machines_user.yml</code></p> <ul> <li>Change the settings in <code>machines_user.yml</code> to match your personal remote machine settings</li> <li>An example is given here:</li> </ul> HSUper <pre><code>hsuper:\n    username: \"&lt;your-username&gt;\"\n    home_path_template: \"/beegfs/home/m/$username\"\n    fabric_dir: \"FabSim3\" # The remote directory where FabSim3 is placing input and output files\n</code></pre> </li> <li> <p>Plugin-specific configuration file: <code>$FABSIM3_HOME/plugins/FabMaMiCo/machines_FabMaMiCo_user.yml</code></p> <ul> <li>Copy the exemplary file <code>machines_FabMaMiCo_user_example.yml</code> and rename it to <code>machines_FabMaMiCo_user.yml</code></li> <li>Change the settings in <code>machines_FabMaMiCo_user.yml</code> to match your personal plugin/simulation settings</li> <li>An example is given here:</li> </ul> HSUper <pre><code>hsuper:\n    compile_on_login_node: yes\n    cores: 1\n    partition_name: \"small_shared\"\n    job_name_template: 'fabmamico_${config}_${machine_name}_${cores}${job_desc}'\n    max_job_name_chars: 80\n    modules:\n        compile: [\"load gcc/13.2.0\", \"load cmake/3.27.9\", \"load openmpi/5.0.3-cuda\", \"load eigen/3.4.0\"]\n        run: [\"load openmpi/5.0.3-cuda\"]\n        postprocess: [\"load python/3.11\"]\n</code></pre> </li> </ol> <p>You can find a detailed explanation of the parameters on the next page (Parameters).</p>"},{"location":"machine-configuration/parameters/","title":"Parameters","text":""},{"location":"machine-configuration/parameters/#machine-specific-parameters","title":"Machine-specific parameters","text":"<p>Here, the default-configuration is given. If variables are in brackets <code>&lt;var&gt;</code>, they are placeholders and need to be replaced with the actual values.</p> <p>FabSim3 reads these parameters prior of executing a task. It provides all parameters by concept of a global variable (<code>env</code>), that can be accessed and queried during task execution. Users can thus access all parameters in their scripts.</p>"},{"location":"machine-configuration/parameters/#connection","title":"Connection","text":"<pre><code>remote: \"&lt;host-url&gt;\"\n# The URL of the remote machine's login node.\n</code></pre> <pre><code>manual_ssh: false\n# Flag to bypass paramiko and to execute direct remote SSH commands.\n</code></pre> <pre><code>manual_gsissh: false\n# Flag to use GSISSH instead of SSH.\n</code></pre> <pre><code>manual_sshpass: false\n# Flag to use sshpass within SSH (requires that either value for sshpass is set with filename of plaintext password file for this machine or SSHPASS set in environment)\n</code></pre> <pre><code>ssh_monsoon_mode: false\n# Flag to use 'monsoon mode', which avoids rsync and instead uses scp.\n</code></pre>"},{"location":"machine-configuration/parameters/#filesystem","title":"Filesystem","text":"<pre><code>home_path_template: \"/home/$username\"\n# The template for the home directory of the user on the remote machine.\n# `$username` will be replaced by the value of the parameter `username`.\n</code></pre> <pre><code>fabric_dir: \"FabSim\"\n# Name for the remote FabSim3 folder holding config_files, results and scripts.\n</code></pre> <pre><code>remote_path_template: \"$home_path/$fabric_dir\"\n# Path to the FabSim3 folder on the remote machine.\n</code></pre> more <pre><code>runtime_path_template: \"$home_path\"\n# Path to runtime accessible filesystem\n</code></pre> <pre><code>temp_path_template: \"/tmp/$username\"\n# Default location of the temporary file path\n</code></pre> <pre><code>work_path_template: \"$runtime_path/$fabric_dir\"\n# Path to run filesystem folder\n</code></pre> <pre><code>local_templates_path:\n- \"$fabsim_root/deploy/templates\"\n# Locations where to look for script templates.\n</code></pre> <pre><code>local_config_file_path:\n- \"$fabsim_root/config_files\"\n# Default location for local config_files.\n# Gets populated with the config_files from the plugins.\n</code></pre>"},{"location":"machine-configuration/parameters/#resource-allocation","title":"Resource Allocation","text":"<pre><code>nodes: 1\n# Default number of nodes.\n# This value might be overriden by the value of 'cores' divided by 'corespernode'.\n</code></pre> <pre><code>corespernode: 1\n# Default number of cores per node.\n</code></pre> <pre><code>cpuspertask: 1\n# Default number of CPUs per task.\n</code></pre> <pre><code>nb_process: 1\n# Number of processes when launch \"run_ensemble\" command.\n</code></pre> <pre><code>cores: 16\n# Number of cores per job.\n</code></pre> <pre><code>cores_per_replica: \"${cores}\"\n# Default number of cores per replica in an ensemble. - jmToDo: OBSOLETE?\n</code></pre>"},{"location":"machine-configuration/parameters/#job-manager","title":"Job-Manager","text":"<pre><code>batch_header: no_batch\n# Default batch job header template.\n# These templates are located in the templates/ subdirectory.\n</code></pre> <pre><code>job_dispatch: ''\n# Default command to use to launch remote jobs\n# e.g. qsub, empty string to launch interactively\n#   (e.g. on localhost, a VM or a machine without scheduler).\n</code></pre> <pre><code>stat: \"qstat -u $username\"\n# Default command syntax for getting the job status.\n</code></pre> <pre><code>job_info_command: \"&lt;e.g.: squeue --jobs $jobID&gt;\"\n# Default command syntax for getting the job info.\n</code></pre> <pre><code>cancel_job_command: \"scancel $jobID\"\n# Default command for cancelling jobs.\n</code></pre> <pre><code>run_command: \"mpirun -np $cores\"\n# Default command used to launch jobs on the nodes of a specific machine.\n</code></pre> <pre><code>job_name_template: '${config}_${machine_name}_${cores}${job_desc}'\n# Default naming scheme used to label FabSim3 jobs.\n</code></pre>"},{"location":"machine-configuration/parameters/#environment","title":"Environment","text":"<pre><code>venv : False\n# Loading virtual environment on the remote machine.\n</code></pre>"},{"location":"machine-configuration/parameters/#other","title":"Other","text":"<pre><code>prevent_results_overwrite: \"ignore\"\n# possible inputs are: [\"delete\",\"ignore\",\"warn_only\"]\n# 1- delete : delete the existing results folder\n# 2- ignore : ignore the existing results folder\n# 2- warn_only : warn user and keep the existing results folder\n</code></pre> <pre><code>rich_console: True\n# enable rich Console for colorful outputs\n</code></pre> <pre><code>dry_run: False\n# Dry Run shows the job script generated by FabSim3 without\n# submitting it to the remote machine\n</code></pre> <pre><code>modules:\n    all: []\n    dummy: []\n    loaded: []\n    unloaded: []\n# Default Modules to load or unload on remote, grouped by scriptname\n#   (or 'all' if to be used by all scripts).\n# e.g. ['cmake'].\n</code></pre>"},{"location":"machine-configuration/parameters/#user-specific-parameters","title":"User-specific parameters","text":"<pre><code>username: \"&lt;username&gt;\"\n# The username of the user on the remote machine.\n# No default\n</code></pre> <pre><code>local_results: \"/home/john/msc/FabSim3/results\"\n# The local path to the results folder.\n# No default\n</code></pre> <pre><code>local_configs: \"/home/john/msc/FabSim3/config_files\"\n# The local path to the config_files folder.\n# No default\n</code></pre>"},{"location":"machine-configuration/parameters/#plugin-specific-simulation-specific-parameters","title":"Plugin-specific / Simulation-specific parameters","text":"<pre><code>job_wall_time: \"&lt;job-wall-time&gt;\"\n# The wall time of the job on the remote machine.\n# No default\n</code></pre> <pre><code>partition_name: \"&lt;partition-name&gt;\"\n# The budget of the user on the remote machine.\n# No default\n</code></pre> <p>This list is by no means exhaustive. Please refer to parameters defined in the FabSim3 repository for more details.</p>"}]}